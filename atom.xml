<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cazaea&#39;s Blog</title>
  
  <subtitle>一直相信：越努力，越幸运；越沟通，越亲近。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cazaea.com/"/>
  <updated>2018-08-30T09:03:24.858Z</updated>
  <id>https://cazaea.com/</id>
  
  <author>
    <name>Cazaea</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最新、最全Hexo博客搭建方法</title>
    <link href="https://cazaea.com/2017/11/25/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://cazaea.com/2017/11/25/Hexo搭建博客/</id>
    <published>2017-11-25T03:11:51.043Z</published>
    <updated>2018-08-30T09:03:24.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>安装必备的工具软件：</p><ul><li><p>具体可参照<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo官网</a></p><ol><li><p>安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git工具</a>，安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></p></li><li><p>注册<a href="https://github.com/" target="_blank" rel="noopener">GitHub账号</a>，注册<a href="https://coding.net/" target="_blank" rel="noopener">Coding账号</a></p></li><li><p>安装写博客工具<a href="http://markdownpad.com/" target="_blank" rel="noopener">MarkDownPad2</a>（个人选择）</p><ul><li>注册邮箱：Soar360@live.com</li><li><p>授权秘钥：<a href="http://cazaea.com/markdownkey.html" title="点击获取">授权码</a></p></li><li><p><em>下载<a href="http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe" target="_blank" rel="noopener">Awesomium 1.6.6 SDK</a>解决MarkdownPad2在win10下报HTML 渲染错误(This view has crashed)</em></p></li></ul></li></ol></li></ul><a id="more"></a><h2 id="建站正式开始"><a href="#建站正式开始" class="headerlink" title="建站正式开始"></a>建站正式开始</h2><p>以上必备应用程序安装完成后(桌面右击打开Git Bash Here)</p><p><img src="https://i.imgur.com/4pqaVRh.png" alt="点击Git Bash Here"></p><p><img src="https://i.imgur.com/Wlsllc5.png" alt="打开后画面"></p><p>输入<code>npm install -g hexo-cli</code>，使用npm安装Hexo，安装成功如下：</p><p><img src="https://i.imgur.com/J5aeujt.png" alt="安装Hexo成功"></p><p>安装成功后执行下面命令<code>hexo -v</code>，信息如下：</p><p><img src="https://i.imgur.com/uWtiiks.png" alt="版本信息"></p><p>接着执行下面命令<code>hexo init Cazaea</code>，初始化自己的博客文件夹，运行后，会在桌面生成一个Cazaea文件夹。</p><ul><li>我这里使用了Cazaea文件夹，你可以随便命名一个自己喜欢的文件夹，当然，你也可以先输入<code>cd d:/</code>，再输入<code>hexo init Cazaea</code>命令，在D盘下生成文件夹Cazaea</li></ul><p><img src="https://i.imgur.com/PY3LNNA.png" alt="初始化成功"></p><p><img src="https://i.imgur.com/uy2n70Z.png" alt="桌面生成文件夹"></p><p>文件夹内容：</p><p><img src="https://i.imgur.com/KaySXLH.png" alt="文件夹内容展示"></p><p>通过执行代码<code>cd Cazaea</code>进入刚刚创建的文件夹，执行<code>hexo s</code>开启本地服务</p><p><img src="https://i.imgur.com/JJKwx23.png" alt="开启本地服务"></p><p>打开浏览器，输入 <strong><em><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></em></strong> 预览最原始页面</p><p><img src="https://i.imgur.com/pqxBavC.png" alt="初始页面"></p><p>此时，本地已没有问题，接下来就是要把它部署到远程服务器了。</p><h2 id="建立GitHub-Pages"><a href="#建立GitHub-Pages" class="headerlink" title="建立GitHub Pages"></a>建立GitHub Pages</h2><p>这时候就要用上之前准备的账号了，登录GitHub，选择新建仓库</p><p><img src="https://i.imgur.com/S6Ixb89.png" alt="新建仓库"></p><p>这个仓库比较特殊，它要按照如下格式进行命名：你的GitHub用户名.github.io。</p><p><img src="https://i.imgur.com/NeJd25T.png" alt="创建仓库"></p><p>新建好这个仓库后，点击右上角Settings</p><p><img src="https://i.imgur.com/dkvyJgD.png" alt="新建仓库参考"></p><p>然后点击settings选项，向下翻到Git Pages选项</p><p><img src="https://i.imgur.com/fx8hfS6.png" alt="选择主题"></p><p>点击<code>Choose the theme</code>选择一个主题，接下来， 你会看到</p><p><img src="https://i.imgur.com/ulhQxPk.png" alt="Git网站走通"></p><h3 id="配置SSH公钥"><a href="#配置SSH公钥" class="headerlink" title="配置SSH公钥"></a>配置SSH公钥</h3><p>配置Github的SSH密钥可以让本地git项目与远程的github建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码库与Github代码库同步。操作如下：</p><p>1.看看是否存在SSH密钥(keys)<br>首先，我们需要看看是否看看本机是否存在SSH keys,打开Git Bash,并运行:</p><pre><code>cd ~/. ssh</code></pre><ul><li>检查你本机用户home目录下是否存在.ssh目录<br>如果，不存在此目录，则进行第二步操作，否则，你本机已经存在ssh公钥和私钥，可以略过第二步，直接进入第三步操作。</li></ul><p>2.创建一对新的SSH密钥(keys)，这将按照你提供的邮箱地址，创建一对密钥</p><pre><code>$ssh-keygen -t rsa -C &quot;your_email@example.com&quot; </code></pre><ul><li><p>接着，根据提示，你需要输入密码和确认密码,在这里我们直接enter，不用输入密码。</p><pre><code>Enter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again]</code></pre></li><li><p>输入完成之后，屏幕会显示如下信息：</p><pre><code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</code></pre></li></ul><p>3.在GitHub账户中添加你的公钥</p><ul><li><p>运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中。</p><pre><code>clip &lt; ~/.ssh/id_rsa.pub</code></pre></li><li><p>接着：<br>登陆GitHub,进入你的Account Settings.</p></li></ul><p><img src="https://i.imgur.com/486kQ9A.png" alt="添加Key"></p><p>4.测试</p><ul><li>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：</li><li><p>成功后你会看到</p><pre><code>Hi Cazaea! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</code></pre></li></ul><p>5.设置用户信息</p><pre><code>git config --global user.name &quot;Cazaea&quot;//用户名git config --global user.email &quot;wistorm@mail.com&quot;//填写自己的邮箱</code></pre><h3 id="为GitHub-Pages配置部署信息"><a href="#为GitHub-Pages配置部署信息" class="headerlink" title="为GitHub Pages配置部署信息"></a>为GitHub Pages配置部署信息</h3><p>打开之前生成的文件夹，找到<code>_config.yml</code>文件，为GitHub Pages配置站点文件</p><p><img src="https://i.imgur.com/xt7GIpF.png" alt="为Git配置站点文件"></p><p>然后在命令窗口执行下面命令,安装相关部署插件</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>安装完成后，执行</p><pre><code>hexo ghexo d</code></pre><p>此时会让你输入GitHub的账号和密码，输入后在浏览器中输入 <strong><em><a href="https://Cazaea.github.io/" target="_blank" rel="noopener">https://Cazaea.github.io/</a></em></strong>  应该就可以访问了,如果未显示，稍等一下，再进行访问，GitHub部署需要一点时间。</p><h2 id="配置Coding-Pages"><a href="#配置Coding-Pages" class="headerlink" title="配置Coding Pages"></a>配置Coding Pages</h2><p>为了一丝一毫的响应速度，推荐同时配置Coding Pages，使网站可以国内请求Coding，海外请求GitHub。从此，你的网站不只快了一点点。</p><p>Coding Pages配置与GitHub Pages配置步骤类似，照着同样的步骤就可以搞定。</p><p>★ 其中有一个坑，勿跳：</p><ul><li><p>当你创建项目后，无法建立分支（Coding提示：代码未上传，请先上传代码）。此时，你可以先通过配置<code>_config.yml</code>文件，将代码上传</p><pre><code>deploy:- type: git  repository: https://github.com/Cazaea/Cazaea.github.io.git  branch: master# 在之前配置的GitHub Pages之后添加Coding Pages配置- type: git  repository: https://git.coding.net/Cazaea/Cazaea.git  branch: coding-pages</code></pre></li></ul><p>然后在Coding.net中打开自己创建的项目，添加分支master：</p><p>复制Commit id<br><img src="https://i.imgur.com/t9NOIAY.png" alt=""></p><p>粘贴Commit id，完成master分支创建<br><img src="https://i.imgur.com/xVlIuSP.png" alt=""></p><p>创建完成，将coding-pages分支删除，再将_config.yml文件更改为：</p><pre><code>deploy:    - type: git      repository: https://github.com/Cazaea/Cazaea.github.io.git      branch: master    # 在之前配置的GitHub Pages之后添加Coding Pages配置    - type: git      repository: https://git.coding.net/Cazaea/Cazaea.git      branch: master</code></pre><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>首先去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo皮肤网站</a>,选择一款进入它的GitHub地址然后将clone的文件移动到themes文件夹下。然后修改<code>_config.yml</code>文件中的<code>theme</code>为你所选择的主题的名称即可。</p><p>推荐使用next主题，执行代码：</p><pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></pre><p>修改站点配置文件<code>_config.yml</code>，找到以下部分：</p><pre><code># Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: landscape</code></pre><p>修改为</p><pre><code># Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/# theme: landscapetheme: next</code></pre><p>然后执行：</p><pre><code>hexo g -d</code></pre><p>★ 传送门必看：修改主题配置信息，请参照<a href="https://zhiho.github.io/2015/09/29/hexo-next/" target="_blank" rel="noopener">Zhiho’s Blog</a></p><h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><p>关于购买域名，此处不再赘述，说的太多，容易跑题。</p><p>之前已经写好了GitHub Pages和Coding Pages服务，只是可以通过<a href="https://Cazaea.github.io" target="_blank" rel="noopener">https://Cazaea.github.io</a>和<a href="http://Cazaea.coding.me" target="_blank" rel="noopener">http://Cazaea.coding.me</a>访问，跟自己的域名一毛钱关系没有，下面，就开始让他们有关系。</p><ol><li>在文件夹Cazaea下的source文件夹创建文件CNAME，无后缀名。</li><li>打开文件（我用的PS Pad），写入文本（自己的域名，切记，<strong>不带<a href="http://www，例如：cazaea.com" target="_blank" rel="noopener">http://www，例如：cazaea.com</a></strong>）</li></ol><p><img src="https://i.imgur.com/Hsi65a8.png" alt="域名文件"></p><p>运行</p><pre><code>hexo g -d</code></pre><p>将文件提交至GitHub和Coding，此时你的域名仍然不能访问，不要着急，你只是缺少了域名的解析。</p><p>之前百度很多，域名解析试了很多，很多能实现<a href="http://cazaea.com">cazaea.com</a>访问，不能实现<a href="http://www.cazaea.com" target="_blank" rel="noopener">www.cazaea.com</a>的访问。</p><p>★最终通过摸索，完成了域名的解析，域名最终都能访问。具体如下：</p><p><img src="https://i.imgur.com/sPX5Qjb.png" alt="域名解析"></p><h2 id="加入搜索引擎"><a href="#加入搜索引擎" class="headerlink" title="加入搜索引擎"></a>加入搜索引擎</h2><p>由于加入Google，需要翻墙，具体翻墙工具个人选择，推荐Shadowsocks，Lantern</p><p>★ 切记：如果使用推荐的下载<code>[googleff0226f76d5f451b.html, baidu_verify_vHC5EAW09E.html]</code>形式，请将下载好的文件放进Cazaea\source文件夹，并且编辑此.html文件，添加标题，如下：</p><ul><li><p>Google html文件</p><pre><code>layout: falsesitemap: false---google-site-verification: oogleff0226f76d5f451b.html</code></pre></li><li><p>Baidu html文件</p><pre><code>layout: falsesitemap: false---vHC5EAW09E</code></pre></li></ul><p>★ 传送门：</p><ul><li>参考①:<a href="https://github.com/HarleyWang93/blog/issues/26" target="_blank" rel="noopener">HarleyWang’s Blog</a></li><li>参考②:<a href="http://www.yuan-ji.me/Hexo-%E4%BC%98%E5%8C%96%EF%BC%9A%E6%8F%90%E4%BA%A4sitemap%E5%8F%8A%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E7%88%AC%E8%99%AB%E6%8A%93%E5%8F%96-GitHub-Pages-%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">JI’s Blog</a></li></ul><h2 id="配置文件（最关键）"><a href="#配置文件（最关键）" class="headerlink" title="配置文件（最关键）"></a>配置文件（最关键）</h2><p>这一步操作，网上的参照碰到了太多的坑，时间太久，很多Hexo建站博客都不够完善，且错误较多。<br>下面，具体说明：</p><ul><li><p>首先是配置<code>_comfig.yml</code>站点文件<br>(这是我最完整的配置，仅做参考，切记每个冒号后都有空格)</p><pre><code># Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site #博客的基本信息title: Cazaea&apos;s Blog # 博客标题subtitle: 一直相信：越努力，越幸运；越沟通，越亲近。 # 博客副标题description: 小有文艺的攻城狮 # 博客描述，部分主题会用来生成简介author: YourName # 博客作者language: zh-Hans # 语言timezone:# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://yoursite.com # 你自己的域名root: / # 根目录位置，如果只是github pages的子目录需要更改permalink: :year/:month/:day/:title/ #:title-:year/:month/:day/permalink_defaults:# Directory #文件结构 默认即可source_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: # 代码高亮enable: true # 是否启用line_number: true # 是否显示行号auto_detect: falsetab_replace:# Home page setting# path: Root path for your blogs index page. (default = &apos;&apos;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:  path: &apos;&apos;  per_page: 3 # 首頁默认10篇文章标题 如果值为0不分页  order_by: -datearchive_generator: # 归档页面  per_page: 10 # 默认10篇文章标题  yearly: true  # 生成年视图  monthly: true # 生成月视图tag_generator: # 标签分类页面  per_page: 10 # 默认10篇文章category_generator: # 分类页面  per_page: 10 # 默认10篇文章# Category &amp; Tag # 分类与标签default_category: uncategorizedcategory_map:tag_map:# Date / Time format # 日期显示格式## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination # 分页器## Set per_page to 0 to disable paginationper_page: 6pagination_dir: page# Extensions # 拓展## Plugins: https://hexo.io/plugins/# 自动生成sitemapsitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml## Themes: https://hexo.io/themes/# 主题更换theme: next# Deployment # 部署参数## Docs: https://hexo.io/docs/deployment.htmldeploy: - type: git    repository: https://github.com/yourgitname/yourgitname.github.io.git # (这里复制你自己的Git项目地址)    branch: master - type: git    repository: https://git.coding.net/yourcodingname/yourcodingname.git # (这里复制你自己的Coding项目地址)    branch: master</code></pre></li><li><p>其次，主题配置文件，同样名为<code>_config.yml</code>，位于主题文件夹下，<code>Cazaea\themes\next</code>。</p><pre><code># 主题样式修改# Schemesscheme: Mist  # 去掉默认的注释即可切换为Mist主题#scheme: Mist#scheme: Pisces#scheme: Gemini</code></pre><p>  在<code>Cazaea\themes\next\source\images</code>文件夹下放入自己的头像。</p><pre><code># 修改头像avatar: /images/head.jpg</code></pre><ul><li><p>具体请参照：</p><p>  修改主题配置信息，请参照<a href="https://zhiho.github.io/2015/09/29/hexo-next/" target="_blank" rel="noopener">Zhiho’s Blog</a></p><p>  整体配置信息，请参照<a href="https://github.com/HarleyWang93/blog/issues/26" target="_blank" rel="noopener">HarleyWang’s Blog</a></p></li></ul></li></ul><p>★ 个性化设置：</p><ul><li>Next主题个性化：<a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">Moorez</a></li><li>添加音乐：<a href="http://www.dingxuewen.com/2017/03/11/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE%E4%B8%89/" target="_blank" rel="noopener">LeviDing</a></li><li>热度调试：<a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">WangHao</a></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>搭建博客，来来回回费了不少的功夫。当然，我也是一个又一个的坑踩过来的。在这期间，我阅读了很多相关的博文，也学习了不少的东西，在此向相关博文的作者表示感谢，谢谢你们的文章让我进步。</p><p>时代在进步，技术在更新。当前这篇Hexo搭建博客的文章，可能随着时间的推移，又会有新的坑出现。各位放心，一定及时更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;安装必备的工具软件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;具体可参照&lt;a href=&quot;https://hexo.io/zh-cn/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo官网&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装&lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git工具&lt;/a&gt;，安装&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注册&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub账号&lt;/a&gt;，注册&lt;a href=&quot;https://coding.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Coding账号&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装写博客工具&lt;a href=&quot;http://markdownpad.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MarkDownPad2&lt;/a&gt;（个人选择）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册邮箱：Soar360@live.com&lt;/li&gt;
&lt;li&gt;&lt;p&gt;授权秘钥：&lt;a href=&quot;http://cazaea.com/markdownkey.html&quot; title=&quot;点击获取&quot;&gt;授权码&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;下载&lt;a href=&quot;http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Awesomium 1.6.6 SDK&lt;/a&gt;解决MarkdownPad2在win10下报HTML 渲染错误(This view has crashed)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="https://cazaea.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://cazaea.com/tags/Hexo/"/>
    
      <category term="博客" scheme="https://cazaea.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Sitemap" scheme="https://cazaea.com/tags/Sitemap/"/>
    
      <category term="Google" scheme="https://cazaea.com/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>SweetAlertDialog Android Studio3.0 Gradle4.1报错处理</title>
    <link href="https://cazaea.com/2017/11/21/SweetAlertDialog/"/>
    <id>https://cazaea.com/2017/11/21/SweetAlertDialog/</id>
    <published>2017-11-21T03:03:37.034Z</published>
    <updated>2018-01-12T06:23:05.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前常用这个轮子, 近两年, 原作者不再维护, AS3.0引用报错, 在此声明新版使用方式.</p><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><h3 id="通过我自己封装SweetAlertDialog添加依赖，直接引用"><a href="#通过我自己封装SweetAlertDialog添加依赖，直接引用" class="headerlink" title="通过我自己封装SweetAlertDialog添加依赖，直接引用"></a>通过我自己封装SweetAlertDialog添加依赖，直接引用</h3><p>参考项目地址:<a href="https://github.com/Cazaea/SweetAlertDialog" target="_blank" rel="noopener">https://github.com/Cazaea/SweetAlertDialog</a></p><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><h3 id="通过导入Library引用"><a href="#通过导入Library引用" class="headerlink" title="通过导入Library引用"></a>通过导入Library引用</h3><blockquote><p>1.下载作者源码<a href="https://github.com/pedant/sweet-alert-dialog" target="_blank" rel="noopener">https://github.com/pedant/sweet-alert-dialog</a>,将作者源码中library作为module引用;<br>通过file–&gt;new–&gt;import Module(将作者源码中library直接导入)</p><p>参考: <a href="http://blog.csdn.net/Wistorms/article/details/78412514" target="_blank" rel="noopener">为项目添加Module依赖</a></p></blockquote><a id="more"></a><blockquote><p>2.删除作者library–&gt;build.gradle中给定的VERSION_NAME, GROUP,以及apply from引用, 更改版本信息(所有xxVersion值)与你的主包xxVersion值统一</p></blockquote><pre><code>apply plugin: &apos;com.android.library&apos;//version = VERSION_NAME//group = GROUP      android {        compileSdkVersion 26        buildToolsVersion &apos;26.0.2&apos;        defaultConfig {               minSdkVersion 19        }        lintOptions {            abortOnError false        }    }     dependencies {        implementation &apos;com.pnikosis:materialish-progress:1.0&apos;     }//apply from: &apos;https://raw.github.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle&apos;</code></pre><blockquote><p>3.同上, 修改library–&gt;src–&gt;AndroidManifest文件中 xxVersion值与主包下值统一</p></blockquote><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;    package=&quot;cn.pedant.SweetAlert&quot;&gt;    &lt;application /&gt;&lt;/manifest&gt;</code></pre><blockquote><p>4.顺便贴出主包信息, 仅供参考.</p></blockquote><pre><code>apply plugin: &apos;com.android.application&apos;android {    compileSdkVersion 26    buildToolsVersion &apos;26.0.2&apos;    defaultConfig {        applicationId &quot;cn.pedant.SweetAlert.sample&quot;        minSdkVersion 19        targetSdkVersion 26        versionCode 1        versionName &quot;1.0.0&quot;        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;        multiDexEnabled true        ndk {            abiFilters &quot;armeabi&quot;        }    }    lintOptions {        abortOnError false    }    /*最新打包输出命名方式 com.xx.xx-versionName(versionCode).apk*/    applicationVariants.all { variant -&gt;        variant.outputs.all { output -&gt;            def newApkName = applicationId + &quot;-&quot; + variant.versionName + &quot;(&quot; + variant.versionCode + &quot;)&quot; + &quot;.apk&quot;            outputFileName = new File(newApkName)        }    }}dependencies {    implementation fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;)    implementation &apos;com.android.support:appcompat-v7:26.1.0&apos;    implementation &apos;com.android.support.constraint:constraint-layout:1.0.2&apos;    testImplementation &apos;junit:junit:4.12&apos;    androidTestImplementation &apos;com.android.support.test:runner:1.0.1&apos;    androidTestImplementation &apos;com.android.support.test.espresso:espresso-core:3.0.1&apos;    //compile &apos;cn.pedant.sweetalert:library:1.3&apos;    implementation project(&apos;:library&apos;)}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前常用这个轮子, 近两年, 原作者不再维护, AS3.0引用报错, 在此声明新版使用方式.&lt;/p&gt;
&lt;h2 id=&quot;方式一&quot;&gt;&lt;a href=&quot;#方式一&quot; class=&quot;headerlink&quot; title=&quot;方式一&quot;&gt;&lt;/a&gt;方式一&lt;/h2&gt;&lt;h3 id=&quot;通过我自己封装SweetAlertDialog添加依赖，直接引用&quot;&gt;&lt;a href=&quot;#通过我自己封装SweetAlertDialog添加依赖，直接引用&quot; class=&quot;headerlink&quot; title=&quot;通过我自己封装SweetAlertDialog添加依赖，直接引用&quot;&gt;&lt;/a&gt;通过我自己封装SweetAlertDialog添加依赖，直接引用&lt;/h3&gt;&lt;p&gt;参考项目地址:&lt;a href=&quot;https://github.com/Cazaea/SweetAlertDialog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Cazaea/SweetAlertDialog&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;方式二&quot;&gt;&lt;a href=&quot;#方式二&quot; class=&quot;headerlink&quot; title=&quot;方式二&quot;&gt;&lt;/a&gt;方式二&lt;/h2&gt;&lt;h3 id=&quot;通过导入Library引用&quot;&gt;&lt;a href=&quot;#通过导入Library引用&quot; class=&quot;headerlink&quot; title=&quot;通过导入Library引用&quot;&gt;&lt;/a&gt;通过导入Library引用&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.下载作者源码&lt;a href=&quot;https://github.com/pedant/sweet-alert-dialog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/pedant/sweet-alert-dialog&lt;/a&gt;,将作者源码中library作为module引用;&lt;br&gt;通过file–&amp;gt;new–&amp;gt;import Module(将作者源码中library直接导入)&lt;/p&gt;
&lt;p&gt;参考: &lt;a href=&quot;http://blog.csdn.net/Wistorms/article/details/78412514&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;为项目添加Module依赖&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://cazaea.com/categories/Android/"/>
    
    
      <category term="SweetAlert" scheme="https://cazaea.com/tags/SweetAlert/"/>
    
      <category term="Dianog" scheme="https://cazaea.com/tags/Dianog/"/>
    
      <category term="AS3.0" scheme="https://cazaea.com/tags/AS3-0/"/>
    
      <category term="Gradle4.1" scheme="https://cazaea.com/tags/Gradle4-1/"/>
    
  </entry>
  
</feed>
